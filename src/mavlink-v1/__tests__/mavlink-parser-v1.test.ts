/*
 * mavlink-parser-v1.test.ts
 *
 * Copyright (c) 2019, 
 * Institute of Flight Mechanics and Control, University of Stuttgart.
 * Pascal Gro√ü <pascal.gross@ifr.uni-stuttgart.de>
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

 // TODO: Find out why this test is failing

import {MAVLinkModule} from "../../mavlink-module";
import {ParserState} from "../../parser-state.enum";
import {messageRegistry} from "../../../assets/message-registry";

let mavlinkModule: MAVLinkModule;

beforeAll(() => {
});

afterAll(() => {
});

beforeEach(() => {
    mavlinkModule = new MAVLinkModule(messageRegistry, 1, false);
});

afterEach(() => {
});

test('MessageStart', () => {
    mavlinkModule.parse(Buffer.from([0x02, 0x11, 0xFF, 0xFD, 0XFE]));
    // @ts-ignore
    expect(mavlinkModule.parser.state).toBe(ParserState.WaitingForHeaderComplete);
});

test('MessageStartTwoPass', () => {
    mavlinkModule.parse(Buffer.from([0x02, 0x11, 0xFF]));
    mavlinkModule.parse(Buffer.from([0xFD, 0XFE]));
    // @ts-ignore
    expect(mavlinkModule.parser.state).toBe(ParserState.WaitingForHeaderComplete);
});

test('MessageStartNotFound', () => {
    mavlinkModule.parse(Buffer.from([0x02, 0x11, 0xFF, 0XFD]));
    // @ts-ignore
    expect(mavlinkModule.parser.state).toBe(ParserState.WaitingForMagicByte);
});

test('MessageStartNotFound', () => {
    mavlinkModule.parse(Buffer.from([0x02, 0x11, 0xFF]));
    // @ts-ignore
    expect(mavlinkModule.parser.state).toBe(ParserState.WaitingForMagicByte);
});

test('MessageStartNotFoundEmptyBuffer', () => {
    mavlinkModule.parse(Buffer.from([0x02, 0x11, 0xFF]));
    // @ts-ignore
    expect(mavlinkModule.parser.buffer.length).toBe(0);
});

test('MessageHeaderComplete', () => {
    // magic: 0xFE
    // len: 9
    // seq: 0
    // sysid: 1
    // compid: 0
    // msgid: 0 (HEARTBEAT)
    // CRC LB
    // CRC HB
    mavlinkModule.parse(Buffer.from([0xFE, 9, 0, 1, 0, 0, 0, 0]));
    // @ts-ignore
    expect(mavlinkModule.parser.state).toBe(ParserState.WaitingForMessageComplete);
});

test('MessageComplete', () => {
    mavlinkModule.parse(Buffer.from([0xFE, 0x3E, 0xBD, 0x01, 0x01, 0x69, 0x71, 0x01, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x42, 0xEA, 0x22, 0xBE, 0x03, 0xD6, 0xC3, 0x3C, 0xF6, 0xCF, 0x1C, 0xC1, 0xA2, 0x6C, 0xC3, 0x3A, 0xDE, 0xB6,
        0x90, 0xB9, 0x9A, 0xB1, 0xC3, 0x3A, 0x7A, 0x89, 0xEF, 0x3E, 0x9D, 0xB5, 0x02, 0xBF, 0xD3, 0xDC, 0x3C, 0xBF,
        0x00, 0x0A, 0xBD, 0x47, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0xC0, 0x43, 0x99, 0x99, 0x29, 0x42, 0xFF, 0x1B,
        0x0E, 0x3A]));
    // @ts-ignore
    expect(mavlinkModule.parser.state).toBe(ParserState.WaitingForMagicByte);
});

test('MessageParsed', async () => {
    const messages = await mavlinkModule.parse(Buffer.from([0xFE, 0x3E, 0xBD, 0x01, 0x01, 0x69, 0x71, 0x01, 0x4A, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x42, 0xEA, 0x22, 0xBE, 0x03, 0xD6, 0xC3, 0x3C, 0xF6, 0xCF, 0x1C, 0xC1, 0xA2, 0x6C, 0xC3, 0x3A, 0xDE, 0xB6,
        0x90, 0xB9, 0x9A, 0xB1, 0xC3, 0x3A, 0x7A, 0x89, 0xEF, 0x3E, 0x9D, 0xB5, 0x02, 0xBF, 0xD3, 0xDC, 0x3C, 0xBF,
        0x00, 0x0A, 0xBD, 0x47, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0xC0, 0x43, 0x99, 0x99, 0x29, 0x42, 0xFF, 0x1B,
        0x0E, 0x3A]));
    // @ts-ignore
    expect(messages.length).toBe(1);
});

test('MessageParsedHighResIMU', async () => {
    const messages = await mavlinkModule.parse(Buffer.from([0xFE, 0x3E, 0xBD, 0x01, 0x01, 0x69, 0x71, 0x01, 0x4A, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x42, 0xEA, 0x22, 0xBE, 0x03, 0xD6, 0xC3, 0x3C, 0xF6, 0xCF, 0x1C, 0xC1, 0xA2, 0x6C, 0xC3, 0x3A, 0xDE, 0xB6,
        0x90, 0xB9, 0x9A, 0xB1, 0xC3, 0x3A, 0x7A, 0x89, 0xEF, 0x3E, 0x9D, 0xB5, 0x02, 0xBF, 0xD3, 0xDC, 0x3C, 0xBF,
        0x00, 0x0A, 0xBD, 0x47, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0xC0, 0x43, 0x99, 0x99, 0x29, 0x42, 0xFF, 0x1B,
        0x0E, 0x3A]));
    // @ts-ignore
    expect(messages[0]._message_name).toBe('HIGHRES_IMU');
});

test('MessageUInt64', async () => {
    const messages = await mavlinkModule.parse(Buffer.from([0xFE, 0x3E, 0xBD, 0x01, 0x01, 0x69, 0x71, 0x01, 0x4A, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x42, 0xEA, 0x22, 0xBE, 0x03, 0xD6, 0xC3, 0x3C, 0xF6, 0xCF, 0x1C, 0xC1, 0xA2, 0x6C, 0xC3, 0x3A, 0xDE, 0xB6,
        0x90, 0xB9, 0x9A, 0xB1, 0xC3, 0x3A, 0x7A, 0x89, 0xEF, 0x3E, 0x9D, 0xB5, 0x02, 0xBF, 0xD3, 0xDC, 0x3C, 0xBF,
        0x00, 0x0A, 0xBD, 0x47, 0x00, 0x00, 0x00, 0x00, 0x78, 0x62, 0xC0, 0x43, 0x99, 0x99, 0x29, 0x42, 0xFF, 0x1B,
        0x0E, 0x3A]));
    // @ts-ignore
    expect(messages[0].time_usec).toBe(4850033);
});

test('MessageWithExtensions', async () => {
    const messages = await mavlinkModule.parse(Buffer.from([0xfe, 0x15, 0xc2, 0x1, 0x1, 0x24, 0x15, 0x40, 0xf0, 0x4f,
        0xdc, 0x5, 0xdc, 0x5, 0xdc, 0x5, 0xdc, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x97, 0x26]));
    expect(messages[0]._message_name).toBe('SERVO_OUTPUT_RAW');
});


test('MessageWithByteReordering', async () => {
    const messages = await mavlinkModule.parse(Buffer.from([0xfe, 0x15, 0xc2, 0x1, 0x1, 0x24, 0x15, 0x40, 0xf0, 0x4f,
        0xdc, 0x5, 0xdc, 0x5, 0xdc, 0x5, 0xdc, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x97, 0x26]));
    // @ts-ignore
    expect(messages[0].port).toBe(1);
});
